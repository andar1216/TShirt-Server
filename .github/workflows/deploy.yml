name: ðŸš€ CI/CD via AWS ECR â†’ EC2

on:
  push:
    branches: [ master ]

jobs:
  # â”€â”€ 1) Build & Push to ECR â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Log in to ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & tag image
        run: |
          IMAGE_URI=â€¦
          docker build \
            -f server/Dockerfile \
            -t $IMAGE_URI:latest \
            -t $IMAGE_URI:${{ github.sha }} \
            server/
            
      - name: Push image to ECR
        run: |
          IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          docker push $IMAGE_URI:latest
          docker push $IMAGE_URI:${{ github.sha }}

      - name: Expose tag to deploy
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

  # â”€â”€ 2) Deploy on EC2 â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  deploy:
    needs: build
    runs-on: [ self-hosted, linux ]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Log in to ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull new image
        run: |
          IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          docker pull $IMAGE_URI:${{ env.IMAGE_TAG }}

      - name: Stop & remove old container
        run: |
          docker stop nodejs-backend || true
          docker rm   nodejs-backend || true

      - name: Run new container
        run: |
          IMAGE_URI=${{ steps.ecr-login.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}
          docker run -d \
            --name nodejs-backend \
            -p 5000:5000 \
            -e NODE_ENV=production \
            -e STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }} \
            $IMAGE_URI:${{ env.IMAGE_TAG }}
